---
description: Comprehensive best practices for implementing security scanning with Semgrep to identify vulnerabilities, enforce coding standards, and improve code quality. Covers rule configuration, custom rules, performance optimization, and integration strategies.
globs: .semgrep.yml,*.yaml,*.yml,*.json,*.toml
---
# Semgrep Security Scanning Best Practices

This document outlines best practices and coding standards for implementing security scanning with Semgrep to identify vulnerabilities, enforce coding standards, and improve code quality.

## 1. Code Organization and Structure

### 1.1. Configuration Structure

Organize your Semgrep configuration with clear separation of concerns:

```yaml
# .semgrep.yml
rules:
  - id: semgrep-python
    pattern: |
      eval($VAR)
    message: "Use of eval() is dangerous"
    languages: [python]
    severity: ERROR

  - id: hardcoded-secret
    pattern: |
      password = "$SECRET"
    message: "Hardcoded secret detected"
    languages: [python]
    severity: ERROR

  - id: sql-injection
    pattern: |
      cursor.execute(f"SELECT * FROM {table}")
    message: "Potential SQL injection vulnerability"
    languages: [python]
    severity: WARNING
```

### 1.2. File Naming Conventions

- Use `.semgrep.yml` for main configuration
- Use descriptive names for custom rules
- Follow consistent naming patterns for rule files

### 1.3. Module Organization

- **Core Rules:** Use official Semgrep rules when possible
- **Language-Specific Rules:** Group rules by programming language
- **Custom Rules:** Organize custom rules in dedicated directories
- **Configuration:** Separate configuration by environment

## 2. Common Patterns and Anti-patterns

### 2.1. Design Patterns

- **Rule-Based Scanning:** Use rules to identify specific patterns
- **Language-Specific Rules:** Group rules by programming language
- **Severity-Based Organization:** Organize rules by severity level
- **Pattern Matching:** Use efficient pattern matching for performance

### 2.2. Recommended Approaches

- Use official Semgrep rules when available
- Implement custom rules for project-specific requirements
- Use language-specific rules for better coverage
- Implement proper error handling and reporting

### 2.3. Anti-patterns

- Don't create overly broad rules that generate false positives
- Avoid rules that are too specific and miss vulnerabilities
- Don't ignore rule performance implications
- Avoid rules that are too slow for CI/CD integration

## 3. Performance Considerations

### 3.1. Optimization Techniques

- Use efficient pattern matching
- Cache rule results for better performance
- Use parallel execution for independent rules
- Optimize rule execution order

### 3.2. Memory Management

- Monitor memory usage of rule execution
- Use efficient data structures in custom rules
- Implement proper cleanup in long-running scans
- Avoid memory leaks in custom rules

## 4. Security Best Practices

### 4.1. Common Vulnerabilities

- **SQL Injection:** Detect SQL injection vulnerabilities
- **XSS:** Identify cross-site scripting vulnerabilities
- **CSRF:** Detect CSRF vulnerabilities
- **Authentication Bypass:** Identify authentication bypass issues

### 4.2. Security Implementation

- Use trusted rule repositories
- Validate rule signatures
- Implement proper input validation
- Use secure coding practices in custom rules

## 5. Testing Approaches

### 5.1. Unit Testing

- Test custom rules in isolation
- Mock external dependencies
- Test error conditions and edge cases
- Use test fixtures for consistent testing

### 5.2. Integration Testing

- Test complete Semgrep workflows
- Test rule interactions
- Test configuration validation
- Test performance under load

## 6. Common Pitfalls and Gotchas

### 6.1. Frequent Mistakes

- Not handling rule failures properly
- Ignoring rule performance
- Not updating rule versions regularly
- Using rules that are too restrictive

### 6.2. Debugging Strategies

- Use verbose logging for rule debugging
- Implement proper error reporting
- Use rule testing tools
- Monitor rule performance

## 7. Tooling and Environment

### 7.1. Recommended Development Tools

- **Semgrep:** Official Semgrep CLI and web interface
- **Testing:** Semgrep testing framework
- **Monitoring:** Rule performance monitoring
- **Logging:** Structured logging for rule execution

### 7.2. Build Configuration

- Use version control for rule configurations
- Implement automated rule updates
- Use environment-specific configurations
- Document rule purposes and requirements

### 7.3. Deployment Best Practices

- Install Semgrep in development environments
- Use CI/CD integration for security scanning
- Implement proper rule version management
- Monitor rule execution in production

### 7.4. CI/CD Integration

- Run Semgrep in CI/CD pipelines
- Automate rule updates
- Implement rule failure notifications
- Monitor rule performance and reliability

By following these best practices, you can implement effective security scanning with Semgrep that identifies vulnerabilities, enforces coding standards, and improves code quality.
